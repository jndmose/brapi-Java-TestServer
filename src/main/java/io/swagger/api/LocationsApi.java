/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.LocationResponse;
import io.swagger.model.LocationsResponse;
import io.swagger.annotations.*;

import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "locations", description = "the locations API")
public interface LocationsApi {

    @ApiOperation(value = "", nickname = "locationsGet", notes = " Implemented by: Germinate Get a list of locations. * The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec. * `altitude` is in meters. **Note**: Consider revising to describe polygon lat/lan points and check if adopting http://geojson.org/ is worth doing for v1. ", response = LocationsResponse.class, tags={ "Locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LocationsResponse.class) })
    @RequestMapping(value = "/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LocationsResponse> locationsGet(@ApiParam(value = "Filter by location type specified.") @Valid @RequestParam(value = "locationType", required = false) String locationType,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "The internal DB id for a location", nickname = "locationsLocationDbIdGet", notes = " <strong>Implemented by:</strong>  GnpIS Get details for a location. * The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec. * `altitude` is in meters. ", response = LocationResponse.class, tags={ "Locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LocationResponse.class) })
    @RequestMapping(value = "/locations/{locationDbId}",
        method = RequestMethod.GET)
    ResponseEntity<LocationResponse> locationsLocationDbIdGet(@ApiParam(value = "The internal DB id for a location",required=true) @PathVariable("locationDbId") String locationDbId);

}
