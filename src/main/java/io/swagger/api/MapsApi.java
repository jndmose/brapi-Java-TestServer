/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.GenomeMapsResponse;
import io.swagger.model.MapDetailsResponse;
import io.swagger.model.MarkersResponse;
import io.swagger.model.MarkersResponse1;
import io.swagger.annotations.*;

import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "maps", description = "the maps API")
public interface MapsApi {

    @ApiOperation(value = "Get list of maps", nickname = "mapsGet", notes = "Get list of maps <br> <strong>Status:</strong> ACCEPTED <strong>Implemented by:</strong> Germinate, Cassavabase <strong>Used by:</strong> Flapjack do we need list of parents and specify mapping population?", response = GenomeMapsResponse.class, tags={ "Genome Maps", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GenomeMapsResponse.class) })
    @RequestMapping(value = "/maps",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GenomeMapsResponse> mapsGet(@ApiParam(value = "Species name") @Valid @RequestParam(value = "species", required = false) String species,@ApiParam(value = "Type of map") @Valid @RequestParam(value = "type", required = false) String type,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "Get map details", nickname = "mapsMapDbIdGet", notes = "Provides the number of markers on each linkageGroup and the max position on the linkageGroup <br> <strong>Status:</strong> ACCEPTED <strong>Implemented by:</strong> Germinate, Cassavabase <strong>Used by:</strong> Flapjack", response = MapDetailsResponse.class, tags={ "Genome Maps", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MapDetailsResponse.class) })
    @RequestMapping(value = "/maps/{mapDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MapDetailsResponse> mapsMapDbIdGet(@ApiParam(value = "The internal db id of a selected map",required=true) @PathVariable("mapDbId") String mapDbId,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "Get map data", nickname = "mapsMapDbIdPositionsGet", notes = "markers ordered by linkageGroup and position <br> <strong>Status:</strong> ACCEPTED. <strong>Implemented by:</strong> Germinate, Cassavabase <strong>Used by:</strong> Flapjack", response = MarkersResponse.class, tags={ "Genome Maps", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MarkersResponse.class) })
    @RequestMapping(value = "/maps/{mapDbId}/positions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MarkersResponse> mapsMapDbIdPositionsGet(@ApiParam(value = "unique id of the map",required=true) @PathVariable("mapDbId") String mapDbId,@ApiParam(value = "<strong>Deprecated</strong> Use linkageGroupName instead") @Valid @RequestParam(value = "linkageGroupId", required = false) String linkageGroupId,@ApiParam(value = "The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.") @Valid @RequestParam(value = "linkageGroupName", required = false) String linkageGroupName,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "Get map data by range on linkageGroup", nickname = "mapsMapDbIdPositionsLinkageGroupNameGet", notes = "markers ordered by linkageGroup and position", response = MarkersResponse1.class, tags={ "Genome Maps", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MarkersResponse1.class) })
    @RequestMapping(value = "/maps/{mapDbId}/positions/{linkageGroupName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MarkersResponse1> mapsMapDbIdPositionsLinkageGroupNameGet(@ApiParam(value = "unique id of the map",required=true) @PathVariable("mapDbId") String mapDbId,@ApiParam(value = "The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.",required=true) @PathVariable("linkageGroupName") String linkageGroupName,@ApiParam(value = "minimum position on linkage group") @Valid @RequestParam(value = "min", required = false) Integer min,@ApiParam(value = "maximum position on linkage group") @Valid @RequestParam(value = "max", required = false) Integer max,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;

}
