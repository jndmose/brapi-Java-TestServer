/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ObservationUnitsResponse;
import io.swagger.model.ObservationUnitsTableResponse1;
import org.threeten.bp.OffsetDateTime;
import io.swagger.model.PhenotypesSearchRequest;
import io.swagger.annotations.*;

import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "phenotypes-search", description = "the phenotypes-search API")
public interface PhenotypesSearchApi {

    @ApiOperation(value = "Phenotype Search CSV", nickname = "phenotypesSearchCsvPost", notes = "Scope: PHENOTYPING. Status: ACCEPTED.  Returns a list of observationUnit with the observed Phenotypes.        observationTimeStamp : Iso Standard 8601.  observationValue data type inferred from the ontology", response = String.class, tags={ "Phenotypes","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/phenotypes-search/csv",
        produces = { "text/csv" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> phenotypesSearchCsvPost(@ApiParam(value = ""  )  @Valid @RequestBody PhenotypesSearchRequest body) throws BrAPIServerException;


    @ApiOperation(value = "Phenotype Search", nickname = "phenotypesSearchGet", notes = "Scope: PHENOTYPING. Status: ACCEPTED.  Returns a list of observationUnit with the observed Phenotypes.  See <a href=\"#introduction/search-services\">Search Services</a> for additional implementation details.  Implemented for GnpIS and PHIS data (https://urgi.versailles.inra.fr/ws/webresources/brapi/v1/phenotypes).  Use case: this section allows to get a dataset from multiple studies. It allows to integrate data from several databases. Refactor note : This call allows to get and integrate portions of multiple phenotyping data matrixes. A proposed evolution allowed to get a list of single observations, this functionality is still possible with this call by specifybing the observation variable, see below. Example Use cases: - Study a panel of germplasm accross multiple studies, search parameters : {\"germplasmDbIds\" : [ \"Syrah\", \"34Mtp362\" ]} - Get all data for a specific study : {\"studyDbIds\" : [ \"383\" ]} - Get simple atomic phenotyping values : {\"germplasmDbIds\" : [ \"Syrah\", \"34Mtp362\" ], \"observationVariableDbIds\" : [ \"CO_345:0000043\"]} - Study Locations for adaptation to climat change : {\"locationDbIds\" : [ \"383838\", \"MONTPELLIER\" ], \"germplasmDbIds\" : [ \"all ids for a given species\"]} - Find phenotypes that are from after a certain timestamp  observationTimeStamp : Iso Standard 8601.  observationValue data type inferred from the ontology", response = ObservationUnitsResponse.class, tags={ "Phenotypes","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationUnitsResponse.class) })
    @RequestMapping(value = "/phenotypes-search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ObservationUnitsResponse> phenotypesSearchGet(@ApiParam(value = "The name or synonym of external genebank accession identifiers") @Valid @RequestParam(value = "germplasmDbId", required = false) String germplasmDbId,
@ApiParam(value = "The ID of traits, could be ontology ID, database ID or PUI") @Valid @RequestParam(value = "observationVariableDbId", required = false) String observationVariableDbId,
@ApiParam(value = "The database ID / PK of the studies search parameter") @Valid @RequestParam(value = "studyDbId", required = false) String studyDbId,
@ApiParam(value = "locations these traits were collected") @Valid @RequestParam(value = "locationDbId", required = false) String locationDbId,
@ApiParam(value = "trial to search across") @Valid @RequestParam(value = "trialDbId", required = false) String trialDbId,
@ApiParam(value = "program that have phenotyped this trait") @Valid @RequestParam(value = "programDbId", required = false) String programDbId,
@ApiParam(value = "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)") @Valid @RequestParam(value = "seasonDbId", required = false) String seasonDbId,
@ApiParam(value = "The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.") @Valid @RequestParam(value = "observationLevel", required = false) String observationLevel,
@ApiParam(value = "Timestamp range start") @Valid @RequestParam(value = "observationTimeStampRangeStart", required = false) OffsetDateTime observationTimeStampRangeStart,
@ApiParam(value = "Timestamp range end") @Valid @RequestParam(value = "observationTimeStampRangeEnd", required = false) OffsetDateTime observationTimeStampRangeEnd,
@ApiParam(value = "The size of the pages to be returned. Default is 1000.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is 0.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "Phenotype Search", nickname = "phenotypesSearchPost", notes = "Scope: PHENOTYPING. Status: ACCEPTED.  Returns a list of observationUnit with the observed Phenotypes.  See <a href=\"#introduction/search-services\">Search Services</a> for additional implementation details.  Implemented for GnpIS and PHIS data (https://urgi.versailles.inra.fr/ws/webresources/brapi/v1/phenotypes).  Use case: this section allows to get a dataset from multiple studies. It allows to integrate data from several databases. Refactor note : This call allows to get and integrate portions of multiple phenotyping data matrixes. A proposed evolution allowed to get a list of single observations, this functionality is still possible with this call by specifybing the observation variable, see below. Example Use cases: - Study a panel of germplasm accross multiple studies, search parameters : {\"germplasmDbIds\" : [ \"Syrah\", \"34Mtp362\" ]} - Get all data for a specific study : {\"studyDbIds\" : [ \"383\" ]} - Get simple atomic phenotyping values : {\"germplasmDbIds\" : [ \"Syrah\", \"34Mtp362\" ], \"observationVariableDbIds\" : [ \"CO_345:0000043\"]} - Study Locations for adaptation to climat change : {\"locationDbIds\" : [ \"383838\", \"MONTPELLIER\" ], \"germplasmDbIds\" : [ \"all ids for a given species\"]} - Find phenotypes that are from after a certain timestamp  observationTimeStamp : Iso Standard 8601.  observationValue data type inferred from the ontology", response = ObservationUnitsResponse.class, tags={ "Phenotypes","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationUnitsResponse.class) })
    @RequestMapping(value = "/phenotypes-search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ObservationUnitsResponse> phenotypesSearchPost(@ApiParam(value = ""  )  @Valid @RequestBody PhenotypesSearchRequest body) throws BrAPIServerException;


    @ApiOperation(value = "Phenotype Search Table", nickname = "phenotypesSearchTablePost", notes = "Scope: PHENOTYPING. Status: ACCEPTED.  Returns a list of observationUnit with the observed Phenotypes.        observationTimeStamp : Iso Standard 8601.  observationValue data type inferred from the ontology", response = ObservationUnitsTableResponse1.class, tags={ "Phenotypes","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationUnitsTableResponse1.class) })
    @RequestMapping(value = "/phenotypes-search/table",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ObservationUnitsTableResponse1> phenotypesSearchTablePost(@ApiParam(value = ""  )  @Valid @RequestBody PhenotypesSearchRequest body) throws BrAPIServerException;


    @ApiOperation(value = "Phenotype Search TSV", nickname = "phenotypesSearchTsvPost", notes = "Scope: PHENOTYPING. Status: ACCEPTED.  Returns a list of observationUnit with the observed Phenotypes.        observationTimeStamp : Iso Standard 8601.  observationValue data type inferred from the ontology", response = String.class, tags={ "Phenotypes","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/phenotypes-search/tsv",
        produces = { "text/csv" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> phenotypesSearchTsvPost(@ApiParam(value = ""  )  @Valid @RequestBody PhenotypesSearchRequest body) throws BrAPIServerException;

}
