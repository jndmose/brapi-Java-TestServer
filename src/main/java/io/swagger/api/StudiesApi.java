/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.GermplasmSummaryListResponse;
import java.util.ArrayList;
import io.swagger.model.NewObservationDbIdsResponse;
import io.swagger.model.NewObservationUnitDbIdsResponse;
import io.swagger.model.NewObservationUnitRequest;
import io.swagger.model.NewObservationsRequest;
import io.swagger.model.NewObservationsRequestWrapperDeprecated;
import io.swagger.model.NewObservationsTableRequest;
import io.swagger.model.ObservationUnitPositionsResponse;
import io.swagger.model.ObservationUnitsResponse1;
import io.swagger.model.ObservationsResponse;
import io.swagger.model.StudyLayoutRequest;
import io.swagger.model.StudyObservationVariablesResponse;
import io.swagger.model.StudyResponse;
import io.swagger.model.StudyobservationsTableResponse;
import io.swagger.annotations.*;

import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.ArrayList;

@Api(value = "studies", description = "the studies API")
public interface StudiesApi {

    @ApiOperation(value = "Study Germplasm Details", nickname = "studiesStudyDbIdGermplasmGet", notes = " Scope: PHENOTYPING <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/germplasm</a>", response = GermplasmSummaryListResponse.class, tags={ "Studies","Germplasm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GermplasmSummaryListResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}/germplasm",
        method = RequestMethod.GET)
    ResponseEntity<GermplasmSummaryListResponse> studiesStudyDbIdGermplasmGet(@ApiParam(value = "Identifier of the study. Usually a number, could be alphanumeric.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "Retrieve study details", nickname = "studiesStudyDbIdGet", notes = " Scope: PHENOTYPING. Status: ACCEPTED. Implemented by: Germinate, GnpIS Notes: an additionalInfo field was added to provide a controlled vocabulary for less common data fields. Retrieve the information of the study required for field data collection More linked data: * observation variables: ```/brapi/v1/studies/{studyDbId}/observationVariables``` * germplasm: ```/brapi/v1/studies/{studyDbId}/germplasm``` * observation units: ```/brapi/v1/studies/{studyDbId}/observationUnits``` * layout: ```brapi/v1/studies/{studyDbId}/layout``` <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}</a>", response = StudyResponse.class, tags={ "Studies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StudyResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}",
        method = RequestMethod.GET)
    ResponseEntity<StudyResponse> studiesStudyDbIdGet(@ApiParam(value = "Identifier of the study. Usually a number, could be alphanumeric.",required=true) @PathVariable("studyDbId") String studyDbId);


    @ApiOperation(value = "Retrieve plot layout details", nickname = "studiesStudyDbIdLayoutGet", notes = " Retrive the layout details for a study. Returns an array of observation unit position data which describes where each unit and germplasm is located within the study layout Retrieve the plot layout of the study with id {id}. For each observationUnit within a study, return the `block`, `replicate`, and `entryType` values as well as the `X` and `Y` coordinates. `entryType` can be \"check\", \"test\", or \"filler\". Also return some human readable meta data about the observationUnit and germplasm. <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/layout</a> ", response = ObservationUnitPositionsResponse.class, tags={ "Studies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationUnitPositionsResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}/layout",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ObservationUnitPositionsResponse> studiesStudyDbIdLayoutGet(@ApiParam(value = "Identifier of the study. Usually a number, could be alphanumeric.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "Retrieve plot layout details", nickname = "studiesStudyDbIdLayoutPut", notes = " Modify a study layout Update the layout data for a set of observation units within a study. Each layout object is a subset of fields within an observationUnit, so it doesnt make sense to create a new layout object by itself. Implementation Notes: + If any of the fields in the request object is missing, that piece of data will not be updated. + If an observationUnitDbId can not be found within the given study, an error will be returned. + `entryType` can have the values \"check\", \"test\", or \"filler\". + The response should match the structure of the response from `GET studies/{studyDbId}/layout`, but it should only contain the layout objects which have been updated by the PUT request. Also, pagination is not available in the response. <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/layout</a> ", response = ObservationUnitPositionsResponse.class, tags={ "Studies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationUnitPositionsResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}/layout",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ObservationUnitPositionsResponse> studiesStudyDbIdLayoutPut(@ApiParam(value = "Identifier of the study. Usually a number, could be alphanumeric.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = "The request body for updateing a study layout"  )  @Valid @RequestBody StudyLayoutRequest studyLayoutRequest);


    @ApiOperation(value = "<strong>Deprecated</strong> Retrieve study observation variables", nickname = "studiesStudyDbIdObservationVariablesGet", notes = "  <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationVariables</a>", response = StudyObservationVariablesResponse.class, tags={ "Studies","Observation Variables","Deprecated", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StudyObservationVariablesResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}/observationVariables",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StudyObservationVariablesResponse> studiesStudyDbIdObservationVariablesGet(@ApiParam(value = "string database unique identifier",required=true) @PathVariable("studyDbId") String studyDbId);


    @ApiOperation(value = "Get Observation Units by observation variable ids", nickname = "studiesStudyDbIdObservationsGet", notes = " Retrieve all observations where there are measurements for the given observation variables. observationTimestamp should be ISO8601 format with timezone: YYYY-MM-DDThh:mm:ss+hhmm <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observations</a>", response = ObservationsResponse.class, tags={ "Studies","Observations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationsResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}/observations",
        method = RequestMethod.GET)
    ResponseEntity<ObservationsResponse> studiesStudyDbIdObservationsGet(@ApiParam(value = "Identifier of the study. Usually a number, could be alphanumeric.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = "Numeric `id` of that variable (combination of trait, unit and method)") @Valid @RequestParam(value = "observationVariableDbIds", required = false) ArrayList<String> observationVariableDbIds,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "Get Observation Units by observation variable ids", nickname = "studiesStudyDbIdObservationsPut", notes = " Implementation Guidelines: + If an `observationDbId` is \"null\" or an empty string in the request, a NEW observation should be created for the given study and observationUnit + If an `observationDbId` is populated but not found in the database, a NEW observation should be created for the given study and observationUnit AND an NEW `observationDbId` should be assigned to it. A warning should be returned to the client. + If an `observationDbId` is populated and found in the database, but the existing entry is not associated with the given study or observationUnit, a NEW observation should be created for the given study and observationUnit AND an NEW `observationDbId` should be assigned to it. A warning should be returned to the client. + If an `observationDbId` is populated and found in the database and is associated with the given study and observationUnit, then it should be updated with the new data given. <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observations</a>", response = NewObservationDbIdsResponse.class, tags={ "Studies","Observations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NewObservationDbIdsResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}/observations",
        method = RequestMethod.PUT)
    ResponseEntity<NewObservationDbIdsResponse> studiesStudyDbIdObservationsPut(@ApiParam(value = "Identifier of the study. Usually a number, could be alphanumeric.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = ""  )  @Valid @RequestBody NewObservationsRequest newObservations);


    @ApiOperation(value = "Get all observation units", nickname = "studiesStudyDbIdObservationunitsGet", notes = " The main API call for field data collection, to retrieve all the observation units within a study. Scope: PHENOTYPING <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationunits</a>", response = ObservationUnitsResponse1.class, tags={ "Studies","Observations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationUnitsResponse1.class) })
    @RequestMapping(value = "/studies/{studyDbId}/observationunits",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ObservationUnitsResponse1> studiesStudyDbIdObservationunitsGet(@ApiParam(value = "The study these observation units are related to.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = "The granularity level of observation units. Either `plotNumber` or `plantNumber` fields will be relavant depending on whether granularity is plot or plant respectively.") @Valid @RequestParam(value = "observationLevel", required = false) String observationLevel,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "<strong>Deprecated</strong> Save Observation Unit Phenotypes", nickname = "studiesStudyDbIdObservationunitsPost", notes = "This call has been deprecated in V1.1. Use instead: \"PUT /studies/{studyDbId}/observationunits\" and \"PUT /studies/{studyDbId}/observationunits/zip\"", tags={ "Studies","Observations","Deprecated", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/studies/{studyDbId}/observationunits",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> studiesStudyDbIdObservationunitsPost(@ApiParam(value = "The study these observation units are related to.",required=true) @PathVariable("studyDbId") String studyDbId,@NotNull @ApiParam(value = "(default is JSON, but can be zip) In case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be ArrayListed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call.", required = true) @Valid @RequestParam(value = "format", required = true) String format,@ApiParam(value = ""  )  @Valid @RequestBody NewObservationsRequestWrapperDeprecated body);


    @ApiOperation(value = "Save Observation Unit Phenotypes", nickname = "studiesStudyDbIdObservationunitsPut", notes = "Use this call for uploading new Observations as JSON to a system.  Note: If 'observationUnitDbId' or 'observationDbId' is populated, they should be considered updates to existing records. If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds. If 'observationUnitDbId' or 'observationDbId' is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.", response = NewObservationUnitDbIdsResponse.class, tags={ "Studies","Observations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NewObservationUnitDbIdsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/studies/{studyDbId}/observationunits",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<NewObservationUnitDbIdsResponse> studiesStudyDbIdObservationunitsPut(@ApiParam(value = "The study these observation units are related to.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = ""  )  @Valid @RequestBody ArrayList<NewObservationUnitRequest> newObservationUnitRequest);


    @ApiOperation(value = "Use this call for uploading new Observations as a Batched Zip File to a system.", nickname = "studiesStudyDbIdObservationunitsZipPost", notes = "Note: If 'observationUnitDbId' or 'observationDbId' is populated, they should be considered updates to existing records. If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds. If 'observationUnitDbId' or 'observationDbId' is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.", response = NewObservationUnitDbIdsResponse.class, tags={ "Observations","Studies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NewObservationUnitDbIdsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/studies/{studyDbId}/observationunits/zip",
        produces = { "application/json" }, 
        consumes = { "application/zip" },
        method = RequestMethod.POST)
    ResponseEntity<NewObservationUnitDbIdsResponse> studiesStudyDbIdObservationunitsZipPost(@ApiParam(value = "The study these observation units are related to.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = ""  )  @Valid @RequestBody byte[] zipRequest);


    @ApiOperation(value = "Get Observation Variables By Study", nickname = "studiesStudyDbIdObservationvariablesGet", notes = " Scope: PHENOTYPING ArrayList all the observation variables measured in the study. Refer to the data type definition of variables in `/Specification/ObservationVariables/README.md`. <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationvariables</a>", response = StudyObservationVariablesResponse.class, tags={ "Studies","Observation Variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StudyObservationVariablesResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}/observationvariables",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StudyObservationVariablesResponse> studiesStudyDbIdObservationvariablesGet(@ApiParam(value = "string database unique identifier",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "Retrieve study Observation Units as table", nickname = "studiesStudyDbIdTableGet", notes = " Scope: PHENOTYPING. Status: ACCEPTED. Implemented in Cassavabase, HIDAP and Germinate. Notes: Implementation target date: after PAG2016 Retrieve the details of the study required for field data collection. Includes actual trait data. <a href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/table</a>", response = StudyobservationsTableResponse.class, tags={ "Studies","Observations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StudyobservationsTableResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}/table",
        produces = { "application/json", "application/csv", "application/tsv" }, 
        method = RequestMethod.GET)
    ResponseEntity<StudyobservationsTableResponse> studiesStudyDbIdTableGet(@ApiParam(value = "Identifier of the study. Usually a number, could be alphanumeric.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = "The format parameter will cause the data to be dumped to a file in the specified format. Currently, tsv and csv are supported.") @Valid @RequestParam(value = "format", required = false) String format);


    @ApiOperation(value = "Save study Observation Units as table", nickname = "studiesStudyDbIdTablePost", notes = " This call can be used to create new observations in bulk. Note: If you need to update any existing observation, please use `PUT /studies/{studyDbId}/observations`. This call should only be used to create NEW observations. Implementation Guidelines: + All observations submitted through this call should create NEW observation records in the database under the given observation unit. + Each \"observationUnitDbId\" ArrayListed should already exist in the database. If the server can not find a given \"observationUnitDbId\", it should report an error. (see Error Handling) + The response of this call should be the set of \"observationDbIds\" created from this call, along with the associated \"observationUnitDbId\" and \"observationVariableDbId\" that each observation is associated with. Images can optionally be saved using this call by providing a zipped file of all images in the datafiles. The physical zipped file should be transferred as well in the mulit-part form data. Scope: PHENOTYPING ", response = NewObservationDbIdsResponse.class, tags={ "Studies","Observations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NewObservationDbIdsResponse.class) })
    @RequestMapping(value = "/studies/{studyDbId}/table",
        method = RequestMethod.POST)
    ResponseEntity<NewObservationDbIdsResponse> studiesStudyDbIdTablePost(@ApiParam(value = "Identifier of the study. Usually a number, could be alphanumeric.",required=true) @PathVariable("studyDbId") String studyDbId,@ApiParam(value = ""  )  @Valid @RequestBody NewObservationsTableRequest newObservationsTableRequest);

}
