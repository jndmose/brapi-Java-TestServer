/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.VendorPlateRequest;
import io.swagger.model.VendorPlateResponse;
import io.swagger.model.VendorPlateSearchRequest;
import io.swagger.model.VendorPlatesResponse;
import io.swagger.model.VendorPlatesResponse1;
import io.swagger.model.VendorSpecificationResponse;
import io.swagger.annotations.*;

import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "vendor", description = "the vendor API")
public interface VendorApi {

    @ApiOperation(value = "Register plates", nickname = "vendorPlatesPost", notes = "Note: if the samples array is empty, plate ID will be returned. Samples can be updated later.", response = VendorPlatesResponse.class, tags={ "Vendor Samples", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VendorPlatesResponse.class) })
    @RequestMapping(value = "/vendor/plates",
        method = RequestMethod.POST)
    ResponseEntity<VendorPlatesResponse> vendorPlatesPost(@ApiParam(value = ""  )  @Valid @RequestBody VendorPlateRequest body);


    @ApiOperation(value = "Search for plates", nickname = "vendorPlatesSearchGet", notes = "Search for plates in the database.  <a href=\"https://test-server.brapi.org/brapi/v1/vendor/plates-search\"> test-server.brapi.org/brapi/v1/vendor/plates-search</a>", response = VendorPlatesResponse1.class, tags={ "Vendor Samples","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VendorPlatesResponse1.class) })
    @RequestMapping(value = "/vendor/plates-search",
        method = RequestMethod.GET)
    ResponseEntity<VendorPlatesResponse1> vendorPlatesSearchGet(@ApiParam(value = "") @Valid @RequestParam(value = "vendorProjectDbId", required = false) String vendorProjectDbId,@ApiParam(value = "") @Valid @RequestParam(value = "vendorPlateDbId", required = false) String vendorPlateDbId,@ApiParam(value = "") @Valid @RequestParam(value = "clientPlateDbId", required = false) String clientPlateDbId,@ApiParam(value = "") @Valid @RequestParam(value = "sampleInfo", required = false) Boolean sampleInfo,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;


    @ApiOperation(value = "Search for plates", nickname = "vendorPlatesSearchPost", notes = "Search for plates in the database.  <a href=\"https://test-server.brapi.org/brapi/v1/vendor\"> test-server.brapi.org/brapi/v1/vendor/plate-search</a>", response = VendorPlatesResponse.class, tags={ "Vendor Samples","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VendorPlatesResponse.class) })
    @RequestMapping(value = "/vendor/plates-search",
        method = RequestMethod.POST)
    ResponseEntity<VendorPlatesResponse> vendorPlatesSearchPost(@ApiParam(value = ""  )  @Valid @RequestBody VendorPlateSearchRequest body) throws BrAPIServerException;


    @ApiOperation(value = "Plate Details by vendorPlateId", nickname = "vendorPlatesVendorPlateDbIdGet", notes = " Response data types   <table> <thead> <tr> <th>Variable</th> <th>Datatype</th> <th>Description</th> <th>Required</th> </tr> </thead> <tbody> <tr> <td>metadata</td> <td>object</td> <td>pagination, status</td> <td>Y</td> </tr> <tr> <td>pagination</td> <td>object</td> <td>pageSize, currentPage, totalCount, totalPages</td> <td>Y</td> </tr> <tr> <td>status</td> <td>list</td> <td>code, message</td> <td>Y</td> </tr> <tr> <td>result</td> <td>Object</td> <td>Object containing MCPD data</td> <td>Y</td> </tr> <tr> <td>vendorProjectDbId</td> <td>string</td> <td>the name or identifier given to a project by the vendor</td> <td>Y</td> </tr> <tr> <td>vendorPlateDbId</td> <td>string</td> <td>the name or identifier of the plate, given by the vendor</td> <td>Y</td> </tr> <tr> <td>clientPlateDbId</td> <td>string</td> <td>the name of the plate, given by the client</td> <td>Y</td> </tr> <tr> <td>barcode</td> <td>string</td> <td>a string that can be represented as a barcode, identifying this plate</td> <td>N</td> </tr> <tr> <td>plateFormat</td> <td>string</td> <td>defines that plate format, usually Plate_96 or tubes for plateless format</td> <td>Y</td> </tr> <tr> <td>sampleType</td> <td>string</td> <td>DNA or RNA or Tissue, etc.</td> <td>Y</td> </tr> <tr> <td>status</td> <td>string</td> <td>The status of the plate in the processing pipeline. Typically,  &quot;Received&quot;, &quot;Processing&quot;, &quot;QC_passed&quot;, QC_failed&quot;, &quot;Completed&quot; (as per vendor-requirements call)</td> <td>Y</td> </tr> <tr> <td>samples</td> <td>Array</td> <td>list of samples in the plate</td> <td>Y</td> </tr> </tbody> </table>  <a href=\"https://test-server.brapi.org/brapi/v1/vendor\"> test-server.brapi.org/brapi/v1/vendor/plate/{vendorPlateDbId}</a>", response = VendorPlateResponse.class, tags={ "Vendor Samples", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VendorPlateResponse.class) })
    @RequestMapping(value = "/vendor/plates/{vendorPlateDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VendorPlateResponse> vendorPlatesVendorPlateDbIdGet(@ApiParam(value = "The plate ID defined by the vendor",required=true) @PathVariable("vendorPlateDbId") String vendorPlateDbId);


    @ApiOperation(value = "Vendor specification", nickname = "vendorSpecificationsGet", notes = " Defines the plate format specification for the vendor. <a href=\"https://test-server.brapi.org/brapi/v1/vendor\"> test-server.brapi.org/brapi/v1/vendor/specifications</a>", response = VendorSpecificationResponse.class, tags={ "Vendor Samples", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VendorSpecificationResponse.class) })
    @RequestMapping(value = "/vendor/specifications",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VendorSpecificationResponse> vendorSpecificationsGet();

}
